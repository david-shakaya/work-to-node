/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("// const validator = require('validator'); //импортируем скачанный npm Валидатор\n// const node = require('./exporImpor') //импортируем из другого файла\n// console.log(node);\n// --------------------------------------------------------------------\n// console.log('id', uuidv4());\n//  Работа с  NODE.js\n// 1) открываем консоль(командная строка) и у нас появляетсься адрес:\n//    C: \\Users\\Давид >\n// 2)воодим адрес с названиемм проэкта \n//    C: \\Users\\Давид > cd Documents\\GitHub\\work-to-node\n//3) Для того что бы получить доступ к файлу index.js  нужно сделать следующее\n//    C:\\Users\\Давид\\Documents\\GitHub\\work-to-node>node index.js\n// и в консоле увидим: hello World\n\n/*\r\n* npmjs.com  - сайт для поиска скачивание и ознакомления с пакетами\r\n*/\n// 4) Cоздаем packege.json - Там будем хранить все наши пакеты и другую инфу.\n//  - Находим адрес с папкой проекта куда будем добавляеть packege.json \n//   C:\\Users\\Давид\\Documents\\GitHub\\work-to-node>npm init\n// 5)  Затем устанавливаем необходимый пакет (например валидатор) \n//      C:\\Users\\Давид\\Documents\\GitHub\\work-to-node>npm install validator\n//  6)  После установки пакет появится папка node_modules. ОБЯЗАТЕЛЬНО добавляем её в .gitignore\n// думаю можно поставить такие значения(подсмотрел у репеты) \n\n/*   node_modules /\r\n   .cache\r\n   dist/\r\n   .DS_Store\r\n */\n\n/*\r\n*  -7) Используем скачанный валидатор. Внизу прописан вызов функции валидатора.\r\n*  - Для проверки валидноссти емейлов. В консоле, терминале вводим node index.js\r\n*\r\n*/\n//    const validateEmail = email => {\n//   return validator.isEmail(email);\n// };\n// console.log(\n//   'Is mango@mail.com a valid email?: ',\n//   validateEmail('mango@mail.com'),\n// );\n// console.log(\n//   'Is Mangozedog.com a valid email?: ',\n//   validateEmail('Mangozedog.com'),\n// );\n// 8) - Устанавливаем babel на сайте https://babeljs.io/setup#installation   выбераем CLI\n//  и устанавливаем\n// 9) Добавляем скрипт и следуем указаниея в документации бабеля\n// 10) Унас будут ошибки после виполнения команды npm run build. Исправляем:\n//  - a) Создаем папку src и туда кидаем исходные файлы .js\n//  - b) Также меняем путь к файлам package.json. Сейчас они уже изменены.\n//  11) Что бы байбил переводил наш код понятный всем браузерам нужно дополнительно установить пресет. \n// -  следуем инструкции в документации пункт 4. https://babeljs.io/setup#installation\n// 12) После установки, в корне проекта создаем файл .babelrc туда кидаем строки(строки уже там)\n// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> WEBPACK <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n// 1) Перед работой Cоздаем packege.json - если он уже создан пропускаем этот шаг.\n// >  npm init\n// 2) Потом устанавливаем вебпак\n// >  npm install webpack webpack-cli --save-dev\n// 3) Создаем файл в корне проекта с названием webpack.config.js  Внутри этого файла создаем експорт\n// и запысываем туда адрес файла js для старта:\n//   module.exports = {\n//   entry: \"./src/index.js\"\n// };\n//  4) Затем в пакет джейсон добавляем скрипт:\n//   \"scripts\": {\n//    \"dev\": \"webpack --mode development\"\n//  также мы можем поставить для продакшина --mode production(это просто для общего развития)\n// }\n// 5) И выполняем следующюю команду в терминале:\n// npm run dev\n//  6) У нас появляеться папка dist с файлом main.js а там всеь наш код уже обработанный вебпаком.\n//  7)Если мы хотим что бы весь код попадал в папку какую нам нужно и создавал файл с нужным именем \n//  прописываем оутпут в файле webpack.config.js :\n// const path = require('path');\n//  output: {\n//     path: path.resolve(__dirname, 'build'), //означает создай папку с именем build\n//     filename: 'bundle.js'  // означает создай файл с именем bundle\n//   }\n// >>>>>>>>>>>>>>>>>>>>>>>>Загрузчики <<<<<<<<<<<<<<<<<\n// Загрузчики для того что бы вебпак работал(баиндил) другие файлы кроме js. Например css,html и тд.\n// Настраиваем коректную работу бабиля вместе с вебпаком. \n// 1) Идем на сайт бабиля https://babeljs.io/setup#installation    и выбираем систему для установки вебпак и устанавливаем его команда:\n//  npm install --save-dev babel-loader @babel/core\n// 2)в webpack.config.js добавляем след код. \n//  module: {\n//     rules: [\n//       {\n//         test: /\\.m?js$/,\n//         exclude: /node_modules/,\n//         use: {\n//           loader: \"babel-loader\",\n//         }\n//       }\n//     ]\n//   }\nvar add = function add(a, b) {\n  return a + b;\n};\n\nadd(2, 3);\n\n//# sourceURL=webpack://work-to-node/./src/index.js?");
/******/ })()
;